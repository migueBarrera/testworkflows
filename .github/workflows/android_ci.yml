name: Production Builds
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checking out branch
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3.2.1
        with:
            log-accepted-android-sdk-licenses: 'false'

    #   # This will decode the keystore from base 64 text representation that we have stored in secrets
    #   # and generates and keystore file and gets stored in /android-app path
    #   - name: Decode Keystore
    #     env:
    #       ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
    #       RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
    #       RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
    #       RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

    #     run: |
    #       echo $ENCODED_STRING > keystore-b64.txt
    #       base64 -d keystore-b64.txt > keystore.jks

    #   - name: Change to project directory
    #     run: cd TestApp

      - name: Build Release apk
        # env:
        #   RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        #   RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
        #   RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew assembleRelease --stacktrace

    #   - name: Get release file aab path
    #     id: releaseAab
    #     run: echo "aabfile=$(find app/build/outputs/bundle/debug/*.aab)" >> $GITHUB_OUTPUT

    #   - name: Get release file apk path
    #     id: releaseApk
    #     run: echo "apkfile=$(find app/build/outputs/apk/debug/*.apk)" >> $GITHUB_OUTPUT

    #   - name: Zip Files
    #     uses: papeloto/action-zip@v1
    #     with:
    #       files: ${{ steps.releaseApk.outputs.apkfile }}
    #       dest: ${{ steps.releaseApk.outputs.apkfile }}.zip

#      - name: Sending release build to Slack
#        uses: MeilCli/slack-upload-file@v3
#        with:
#          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
#          file_path: ${{ steps.releaseApk.outputs.apkfile }}.zip
#          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
#          initial_comment: "Release build is now available."
#
#      - name: upload apk to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID_RELEASE}}
#          serviceCredentialsFileContent: ${{ secrets.SERVICE_CREDENTIALS_FILE_RELEASE }}
#          groups: ${{ github.event.inputs.testers }}
#          file: ${{ steps.releaseApk.outputs.apkfile }}


      - name: Find and upload APKs
        run: |
            APK_PATH=$(find . -type f -name "*.apk" | grep -m 1 "release")
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v4
        with:
            name: release-artifacts
            path: ${{ env.APK_PATH }}